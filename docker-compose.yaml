version: "3"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_SERVER_ID=1
      - ZOOKEEPER_SERVERS=zookeeper:2888:3888

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_BROKER_ID=1
      - KAFKA_LOG4J_LOGGERS=kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_JMX_PORT=9999
      - KAFKA_JMX_HOSTNAME=${DOCKER_HOST_IP:-127.0.0.1}
      - KAFKA_AUTHORIZER_CLASS_NAME=kafka.security.authorizer.AclAuthorizer
      - KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND=true
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper

  postgis:
    image: postgis/postgis:16-3.4-alpine
    container_name: postgis
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - ./volumes/postgres/data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"

  redis:
    image: bitnami/redis
    container_name: redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"

  localstack:
    image: localstack/localstack
    ports:
      - "127.0.0.1:53:53" # only required for Pro
      - "127.0.0.1:53:53/udp" # only required for Pro
      - "127.0.0.1:4566:4566" # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559" # external services port range
      - "127.0.0.1:4571:4571"
      - "127.0.0.1:444:444"
    environment:
      - DEBUG=${DEBUG:-0}
      - SERVICES=s3,lambda,apigateway,cloudformation,secretsmanager #,ssm,route53,iam,sts,ec2,
      - AWS_ACCESS_KEY_ID=foo
      - AWS_SECRET_ACCESS_KEY=bar
      - AWS_DEFAULT_REGION=eu-west-2
      - TEST_BUCKET=deltalake
      - BIGDATA_MONO_CONTAINER=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DEFAULT_REGION=eu-west-2
      # Useed in pro version (localstack/localstack-pro) of localstack including Athena, Glue ...
      # - LOCALSTACK_AUTH_TOKEN=${LOCALSTACK_AUTH_TOKEN}
      # If ssl is required
      # - USE_SSL=1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      # - "${LOCALSTACK_VOLUME_DIR:-./volumes/localstack}:/var/lib/localstack"
    networks:
      ls:
        # Set the container IP address in the 10.0.2.0/24 subnet
        # To use this for dns in other containers set dns in the container 
        # to 10.0.2.20 and networks to ls
        # container:
        #   dns:
        #     - 10.0.2.20
        #   networks:
        #     - ls
        ipv4_address: 10.0.2.20

networks:
  ls:
    ipam:
      config:
        # Specify the subnet range for IP address allocation
        - subnet: 10.0.2.0/24
